/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  DEFAULT_SETTINGS: () => DEFAULT_SETTINGS,
  default: () => ObsidianAI
});
module.exports = __toCommonJS(main_exports);
var import_obsidian2 = require("obsidian");

// PromptModal.ts
var import_obsidian = require("obsidian");

// node_modules/spin.js/spin.js
var __assign = function() {
  __assign = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
var defaults = {
  lines: 12,
  length: 7,
  width: 5,
  radius: 10,
  scale: 1,
  corners: 1,
  color: "#000",
  fadeColor: "transparent",
  animation: "spinner-line-fade-default",
  rotate: 0,
  direction: 1,
  speed: 1,
  zIndex: 2e9,
  className: "spinner",
  top: "50%",
  left: "50%",
  shadow: "0 0 1px transparent",
  position: "absolute"
};
var Spinner = function() {
  function Spinner2(opts2) {
    if (opts2 === void 0) {
      opts2 = {};
    }
    this.opts = __assign(__assign({}, defaults), opts2);
  }
  Spinner2.prototype.spin = function(target) {
    this.stop();
    this.el = document.createElement("div");
    this.el.className = this.opts.className;
    this.el.setAttribute("role", "progressbar");
    css(this.el, {
      position: this.opts.position,
      width: 0,
      zIndex: this.opts.zIndex,
      left: this.opts.left,
      top: this.opts.top,
      transform: "scale(" + this.opts.scale + ")"
    });
    if (target) {
      target.insertBefore(this.el, target.firstChild || null);
    }
    drawLines(this.el, this.opts);
    return this;
  };
  Spinner2.prototype.stop = function() {
    if (this.el) {
      if (typeof requestAnimationFrame !== "undefined") {
        cancelAnimationFrame(this.animateId);
      } else {
        clearTimeout(this.animateId);
      }
      if (this.el.parentNode) {
        this.el.parentNode.removeChild(this.el);
      }
      this.el = void 0;
    }
    return this;
  };
  return Spinner2;
}();
function css(el, props) {
  for (var prop in props) {
    el.style[prop] = props[prop];
  }
  return el;
}
function getColor(color, idx) {
  return typeof color == "string" ? color : color[idx % color.length];
}
function drawLines(el, opts2) {
  var borderRadius = Math.round(opts2.corners * opts2.width * 500) / 1e3 + "px";
  var shadow = "none";
  if (opts2.shadow === true) {
    shadow = "0 2px 4px #000";
  } else if (typeof opts2.shadow === "string") {
    shadow = opts2.shadow;
  }
  var shadows = parseBoxShadow(shadow);
  for (var i = 0; i < opts2.lines; i++) {
    var degrees = ~~(360 / opts2.lines * i + opts2.rotate);
    var backgroundLine = css(document.createElement("div"), {
      position: "absolute",
      top: -opts2.width / 2 + "px",
      width: opts2.length + opts2.width + "px",
      height: opts2.width + "px",
      background: getColor(opts2.fadeColor, i),
      borderRadius,
      transformOrigin: "left",
      transform: "rotate(" + degrees + "deg) translateX(" + opts2.radius + "px)"
    });
    var delay = i * opts2.direction / opts2.lines / opts2.speed;
    delay -= 1 / opts2.speed;
    var line = css(document.createElement("div"), {
      width: "100%",
      height: "100%",
      background: getColor(opts2.color, i),
      borderRadius,
      boxShadow: normalizeShadow(shadows, degrees),
      animation: 1 / opts2.speed + "s linear " + delay + "s infinite " + opts2.animation
    });
    backgroundLine.appendChild(line);
    el.appendChild(backgroundLine);
  }
}
function parseBoxShadow(boxShadow) {
  var regex = /^\s*([a-zA-Z]+\s+)?(-?\d+(\.\d+)?)([a-zA-Z]*)\s+(-?\d+(\.\d+)?)([a-zA-Z]*)(.*)$/;
  var shadows = [];
  for (var _i = 0, _a = boxShadow.split(","); _i < _a.length; _i++) {
    var shadow = _a[_i];
    var matches = shadow.match(regex);
    if (matches === null) {
      continue;
    }
    var x = +matches[2];
    var y = +matches[5];
    var xUnits = matches[4];
    var yUnits = matches[7];
    if (x === 0 && !xUnits) {
      xUnits = yUnits;
    }
    if (y === 0 && !yUnits) {
      yUnits = xUnits;
    }
    if (xUnits !== yUnits) {
      continue;
    }
    shadows.push({
      prefix: matches[1] || "",
      x,
      y,
      xUnits,
      yUnits,
      end: matches[8]
    });
  }
  return shadows;
}
function normalizeShadow(shadows, degrees) {
  var normalized = [];
  for (var _i = 0, shadows_1 = shadows; _i < shadows_1.length; _i++) {
    var shadow = shadows_1[_i];
    var xy = convertOffset(shadow.x, shadow.y, degrees);
    normalized.push(shadow.prefix + xy[0] + shadow.xUnits + " " + xy[1] + shadow.yUnits + shadow.end);
  }
  return normalized.join(", ");
}
function convertOffset(x, y, degrees) {
  var radians = degrees * Math.PI / 180;
  var sin = Math.sin(radians);
  var cos = Math.cos(radians);
  return [
    Math.round((x * cos + y * sin) * 1e3) / 1e3,
    Math.round((-x * sin + y * cos) * 1e3) / 1e3
  ];
}

// PromptModal.ts
var opts = {
  lines: 15,
  length: 33,
  width: 2,
  radius: 10,
  scale: 1,
  corners: 1,
  speed: 0.5,
  rotate: 0,
  animation: "spinner-line-fade-default",
  direction: 1,
  color: "#755be1",
  fadeColor: "transparent",
  top: "50%",
  left: "50%",
  shadow: "0 0 1px transparent",
  zIndex: 2e9,
  className: "spinner",
  position: "absolute"
};
var PromptModal = class extends import_obsidian.Modal {
  constructor(app, modalTitle, placeholder, callback, onSubmit) {
    super(app);
    this.modalTitle = modalTitle;
    this.placeholder = placeholder;
    this.callback = callback;
    this.onSubmit = onSubmit;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h2", { text: this.modalTitle });
    new import_obsidian.Setting(contentEl).setName("Prompt").setDesc("The prompt for Chat GPT").addTextArea((text) => text.setPlaceholder(this.placeholder).setValue(this.userInput).onChange(async (value) => {
      this.userInput = value;
    }));
    contentEl.createEl("button", { text: "Submit" }).addEventListener("click", () => {
      contentEl.createEl("h2", { text: "Loading..." });
      let spinner = new Spinner(opts).spin(contentEl);
      this.callback(this.userInput).then(async (result) => {
        this.AIresult = await result;
        contentEl.removeChild(contentEl.lastChild);
        spinner.stop();
        contentEl.createEl("h2", { text: "Result: " + this.userInput });
        new import_obsidian.Setting(contentEl).setName("Result").setDesc("The result from ChatGPT").addTextArea((text) => text.setPlaceholder("Result").setValue(this.AIresult).setDisabled(true).onChange(async (value) => {
          console.log("Result: " + value);
          this.userInput = value;
        }));
        contentEl.createEl("button", { text: "Keep" }).addEventListener("click", () => {
          this.onSubmit("# " + this.userInput);
          this.onSubmit(this.AIresult);
          this.close();
        });
        contentEl.createEl("button", { text: "Discard" }).addEventListener("click", () => {
          this.onSubmit("");
          this.close();
        });
      });
    });
  }
  onClose() {
    let { contentEl } = this;
    contentEl.empty();
  }
};

// ChatGPT.ts
var ChatGPT = class {
  constructor(apiKeyParam) {
    this.sendToAPI = async (file, prompt) => {
      file = file.replace(/(\r\n|\n|\r|\t|")/gm, " ");
      prompt = prompt.replace(/(\r\n|\n|\r|\t|")/gm, " ");
      if (file.slice(-1) !== ".") {
        file = file + ".";
      }
      try {
        return await this.createCompletion({
          model: "gpt-3.5-turbo",
          messages: [
            { "role": "system", "content": `"${prompt}"` },
            { "role": "user", "content": `"${file}"` }
          ]
        });
      } catch (error) {
        console.error(error);
      }
    };
    this.helpMeWrite = async (file) => {
      let prompt = `You are an assistant helping a user write more content in a document based on a prompt. Output in markdown format. Do not use links. Do not include literal content from the original document.
Use this format, replacing text in brackets with the result. Do not include the brackets in the output: 
Output in [Identified language of the document]: 
[Output based on the prompt, in markdown format.]`;
      return await this.sendToAPI(file, prompt);
    };
    this.ask = async (file) => {
      let prompt = "";
      return await this.sendToAPI(file, prompt);
    };
    this.brainstormIdeas = async (file) => {
      let prompt = `You are an assistant helping brainstorm a list of ideas inside a document.
        Use this format, replacing text in brackets with the result. Do not include the brackets in the output:
        10 ideas based on the topic, in [Identified language of the prompt]:
        
        - [Idea 1]
        - [Idea 2]
        - [Idea 3]
        - [Idea 4]
        - [Idea 5]
        - [Idea 6]
        - [Idea 7]
        - [Idea 8]
        - [Idea 9]
        - [Idea 10]`;
      return await this.sendToAPI(file, prompt);
    };
    this.continueWriting = async (file) => {
      let prompt = `You are an assistant helping a user write a document. Output how the document continues, no more than 3 sentences. Output in markdown format. Do not use links.
        Use this format, replacing text in brackets with the result. Do not include the brackets in the output:
        
        Continuation in [Identified language of the document]:
        [Continuation of the document in markdown format, no more than 3 sentences.]`;
      return await this.sendToAPI(file, prompt);
    };
    this.summarize = async (file) => {
      let prompt = `You are an assistant helping summarize a document. Use this format, replacing text in brackets with the result. Do not include the brackets in the output: 

        Summary in [Identified language of the document]: 
        
        [One-paragraph summary of the document using the identified language.].`;
      return await this.sendToAPI(file, prompt);
    };
    this.findActionItems = async (file) => {
      let prompt = `You are an assistant helping find action items inside a document. An action item is an extracted task or to-do found inside of an unstructured document. Use this format, replacing text in brackets with the result. Do not include the brackets in the output:

        List of action items in [Identified language of the document]:
        [List of action items in the identified language, in markdown format. Prefix each line with "- []" to make it a checkbox.]`;
      return await this.sendToAPI(file, prompt);
    };
    this.blogPost = async (file) => {
      let prompt = `You are an assistant helping to generate a blog post on a given topic. 
        Use this format, replacing text in brackets with the result. Do not include the brackets in the output:
        
        Blog post in [Identified language of the topic]
        
        # [Topic of the blog post]
        [Blog post body]`;
      return await this.sendToAPI(file, prompt);
    };
    this.prosAndConsList = async (file) => {
      let prompt = `You are an assistant helping to generate a list of pros and cons about a topic. Use this format, replacing text in brackets with the result. Do not include the brackets in the output: 

        Pros and cons in [Identified language of the topic]: 
        
        ## ["Pros" in the identified language] 
        
        [List of 5 pros, one sentence each.] 
        
        ## ["Cons" in the identified language] 
        
        [List of 5 cons, one sentence each.]`;
      return await this.sendToAPI(file, prompt);
    };
    this.socialMediaPost = async (file) => {
      let prompt = `You are an assistant helping to draft a social media post. Use this format, replacing text in brackets with the result. Do not include the brackets in the output:

        Post in [Identified language of the topic]:
        
        # [Title]
        
        [One paragraph post body] 
        
        Tags: [List of relevant #hashtags]`;
      return await this.sendToAPI(file, prompt);
    };
    this.outline = async (file) => {
      let prompt = `You are an assistant helping to draft an outline for a document. Use this format, replacing text in brackets with the result. Do not include the brackets in the output: 

        Outline in [Identified language of the topic]: 
        
        # [Title of document] 
        [Bulleted list outline of document, in markdown format]`;
      return await this.sendToAPI(file, prompt);
    };
    this.creativeStory = async (file) => {
      let prompt = `You are an assistant helping to write a creative story. Use this format, replacing text in brackets with the result. Do not include the brackets in the output: 

        Story in [Identified language of the topic]: 
        
        # [Title of story] 
        [First 5 paragraphs of story]`;
      return await this.sendToAPI(file, prompt);
    };
    this.poem = async (file) => {
      let prompt = `You are an assistant helping to write a poem. Use this format, replacing text in brackets with the result. Do not include the brackets in the output: 

        Poem in [Identified language of the topic]: 
        
        # [Title of poem] 
        [Poem, at least 4 lines]`;
      return await this.sendToAPI(file, prompt);
    };
    this.essay = async (file) => {
      let prompt = `You are an assistant helping to write an essay. 
        Use this format, replacing text in brackets with the result. Do not include the brackets in the output: 
        
        Essay in [Identified language of the topic]:
        
          # [Essay title]
          
          [Introduction paragraph]
          
          ## [Name of topic 1]
          
          [Paragraph about topic 1]
          
          ## [Name of topic 2]
          
          [Paragraph about topic 2]
          
          ## [Name of topic 3]
          
          [Paragraph about topic 3]
          
          ## ['Conclusion', in the identified language of the topic]
          
          [Conclusion paragraph]`;
      return await this.sendToAPI(file, prompt);
    };
    this.meetingAgenda = async (file) => {
      let prompt = `You are an assistant helping to write a meeting agenda. 
        Use this format, replacing text in brackets with the result. Do not include the brackets in the output: 
        
        Meeting agenda in [Identified language of the topic]: 
        
        # [Meeting name] 
        
        [Introduction paragraph about the purpose and goals of the meeting] 
        
        [Bulleted list of at least 3 topics, in markdown format. Make sure to include details for each topic.]`;
      return await this.sendToAPI(file, prompt);
    };
    this.pressRelease = async (file) => {
      let prompt = `You are an assistant helping to draft a press release. Use this format, replacing text in brackets with the result. Do not include the brackets in the output: 

        Press release in [Identified language of the topic]: 
        
        # [Press release headline] 
        [Press release body, in markdown format.] `;
      return await this.sendToAPI(file, prompt);
    };
    this.jobDescription = async (file) => {
      let prompt = `You are an assistant helping to draft a job description. Use this format, replacing text in brackets with the result. Do not include the brackets in the output: 

        Job description in [Identified language of the prompt]: 
        
        # [Job title] 
        
        ## ["Overview", in the identified language] 
        
        [Overview of job, one paragraph] 
        
        ## ["Responsibilities", in the identified language] 
        
        [Bulleted list of at least 3 key responsibilities] 
        
        ## ["Qualifications", in the identified language] 
        
        [Bulleted list of at least 3 key qualifications]`;
      return await this.sendToAPI(file, prompt);
    };
    this.salesEmail = async (file) => {
      let prompt = `You are an assistant helping to draft a personalized sales email. Use this format, replacing text in brackets with the result. Do not include the brackets in the output:

        Output in [Identified language of the prompt]: 
        
        # [Sales email title] 
        [Sales email subject] 
        
        [Sales email body]`;
      return await this.sendToAPI(file, prompt);
    };
    this.recruitingEmail = async (file) => {
      let prompt = `You are an assistant helping to draft a personalized recruiting email. Use this format, replacing text in brackets with the result. Do not include the brackets in the output:
  
        Recruiting email in [Identified language of the notes]:
            
        # [Recruiting email title]
          
            [Recruiting email subject] [Recruiting email body]`;
      return await this.sendToAPI(file, prompt);
    };
    this.improveWriting = async (file) => {
      let prompt = `You are an assistant helping to improve a piece of writing. Don't change the ideas, just improve the writing.`;
      return await this.sendToAPI(file, prompt);
    };
    this.fixSpellingAndGrammar = async (file) => {
      let prompt = `You are an assistant helping to fix spelling and grammar in a piece of writing. Don't change the ideas, just fix the spelling and grammar.`;
      return await this.sendToAPI(file, prompt);
    };
    this.explainThis = async (file) => {
      let prompt = `You will be given a text. Explain the text in a clear and easy to understand way. Don't make it too basic or too advanced.`;
      return await this.sendToAPI(file, prompt);
    };
    this.makeLonger = async (file) => {
      let prompt = `You will be given a text. Make it longer. Don't change the ideas, just make it longer.`;
      return await this.sendToAPI(file, prompt);
    };
    this.makeShorter = async (file) => {
      let prompt = `You will be given a text. Make it shorter. Don't change the ideas, just make it shorter.`;
      return await this.sendToAPI(file, prompt);
    };
    this.useSimplerLanguage = async (file) => {
      let prompt = `You will be given a text. Rewrite the text to use simpler language. Don't change the ideas, just use simpler language.`;
      return await this.sendToAPI(file, prompt);
    };
    this.apiKey = apiKeyParam;
  }
  async createCompletion(params = {}) {
    const params_ = { ...params };
    const result = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        "Authorization": `Bearer ${this.apiKey}`,
        "Content-Type": "application/json"
      },
      body: JSON.stringify(params_)
    });
    const output = await result.json();
    console.log("normal: " + output.choices[0].message.content);
    return output.choices[0].message.content;
  }
  async fetchStream(stream) {
    const reader = stream.getReader();
    let charsReceived = 0;
    const li = document.createElement("li");
    const result = await reader.read().then(function processText({ done, value }) {
      if (done) {
        return li.innerText;
      }
      charsReceived += value.length;
      const chunk = value;
      li.appendChild(document.createTextNode(chunk));
      return reader.read().then(processText);
    });
    const list = result.split(",");
    const numList = list.map((item) => {
      return parseInt(item);
    });
    const text = String.fromCharCode(...numList);
    const response = JSON.parse(text);
    return response;
  }
};

// main.ts
var DEFAULT_SETTINGS = {
  apiKey: "sk-XXXXXXXXX"
};
var ObsidianAI = class extends import_obsidian2.Plugin {
  async onload() {
    await this.loadSettings();
    const statusBarItemEl = this.addStatusBarItem();
    statusBarItemEl.setText("Obsidian AI Enabled");
    this.addCommand({
      id: "ask-question",
      name: "Ask a question (sends the document text to the AI)",
      editorCallback: async (editor, view) => {
        let activeView = this.app.workspace.getActiveViewOfType(import_obsidian2.MarkdownView);
        if (activeView) {
          console.log();
          let fileContents = this.app.vault.cachedRead(activeView.file);
          let response = this.obsidianAI.ask(await fileContents);
          console.log(editor.getSelection());
          editor.replaceSelection(await response || "");
        }
      }
    });
    this.addCommand({
      id: "help-me-write",
      name: "Help Me Write (write more content to the document)",
      editorCallback: async (editor, view) => {
        let activeView = this.app.workspace.getActiveViewOfType(import_obsidian2.MarkdownView);
        if (activeView) {
          new PromptModal(this.app, "Help Me Write", "What would you like to write about? \n For example, '5 reasons why we should hire a dedicated designer'", this.obsidianAI.helpMeWrite, (result) => {
            editor.replaceSelection(result || "");
          }).open();
        }
      }
    });
    this.addCommand({
      id: "continue-writing",
      name: "Continue Writing (AI continues based on existing text - propmtless))",
      editorCallback: async (editor, view) => {
        let activeView = this.app.workspace.getActiveViewOfType(import_obsidian2.MarkdownView);
        if (activeView) {
          let fileContents = this.app.vault.cachedRead(activeView.file);
          let response = this.obsidianAI.continueWriting(await fileContents);
          console.log(editor.getSelection());
          editor.replaceSelection(await response || "");
        }
      }
    });
    this.addCommand({
      id: "brainstorm-ideas",
      name: "Brainstorm Ideas (10 ideas based on the topic)",
      editorCallback: async (editor, view) => {
        let activeView = this.app.workspace.getActiveViewOfType(import_obsidian2.MarkdownView);
        if (activeView) {
          new PromptModal(this.app, "Brainstorm Ideas", "What would you like to brainstorm about? \n For example, '10 ways to throw a birthday party'", this.obsidianAI.brainstormIdeas, (result) => {
            editor.replaceSelection(result || "");
          }).open();
        }
      }
    });
    this.addCommand({
      id: "summarize",
      name: "Summarize (based on existing text - propmtless))",
      editorCallback: async (editor, view) => {
        let activeView = this.app.workspace.getActiveViewOfType(import_obsidian2.MarkdownView);
        if (activeView) {
          let fileContents = this.app.vault.cachedRead(activeView.file);
          let response = this.obsidianAI.summarize(await fileContents);
          console.log(editor.getSelection());
          editor.replaceSelection(await response);
        }
      }
    });
    this.addCommand({
      id: "find-action-items",
      name: "Find action items (based on existing text - propmtless))",
      editorCallback: async (editor, view) => {
        let activeView = this.app.workspace.getActiveViewOfType(import_obsidian2.MarkdownView);
        if (activeView) {
          let fileContents = this.app.vault.cachedRead(activeView.file);
          let response = this.obsidianAI.findActionItems(await fileContents);
          console.log(editor.getSelection());
          editor.replaceSelection(await response || "");
        }
      }
    });
    this.addCommand({
      id: "find-action-items",
      name: "Find action items (based on existing text - propmtless))",
      editorCallback: async (editor, view) => {
        let activeView = this.app.workspace.getActiveViewOfType(import_obsidian2.MarkdownView);
        if (activeView) {
          let fileContents = this.app.vault.cachedRead(activeView.file);
          let response = this.obsidianAI.findActionItems(await fileContents);
          console.log(editor.getSelection());
          editor.replaceSelection(await response || "");
        }
      }
    });
    this.addCommand({
      id: "blog-post",
      name: "Blog Post (Write a blog post about the given topic)",
      editorCallback: async (editor, view) => {
        let activeView = this.app.workspace.getActiveViewOfType(import_obsidian2.MarkdownView);
        if (activeView) {
          new PromptModal(this.app, "Blog Post", "What should the blog post be about? \n For example, 'the benefits of practicing mindfulness and meditation'", this.obsidianAI.blogPost, (result) => {
            editor.replaceSelection(result || "");
          }).open();
        }
      }
    });
    this.addCommand({
      id: "pros-and-cons-list",
      name: "Pros and Cons List (Write 5 pros and 5 cons list about the given topic)",
      editorCallback: async (editor, view) => {
        let activeView = this.app.workspace.getActiveViewOfType(import_obsidian2.MarkdownView);
        if (activeView) {
          new PromptModal(this.app, "Pros and Cons List", "What should the blog post be about? \n For example, 'the benefits of practicing mindfulness and meditation'", this.obsidianAI.prosAndConsList, (result) => {
            editor.replaceSelection(result || "");
          }).open();
        }
      }
    });
    this.addCommand({
      id: "social-media-post",
      name: "Social Media Post (Write a social media post about the given topic)",
      editorCallback: async (editor, view) => {
        let activeView = this.app.workspace.getActiveViewOfType(import_obsidian2.MarkdownView);
        if (activeView) {
          new PromptModal(this.app, "Social Media Post", "What should the blog post be about? \n For example, 'the benefits of practicing mindfulness and meditation'", this.obsidianAI.socialMediaPost, (result) => {
            editor.replaceSelection(result || "");
          }).open();
        }
      }
    });
    this.addCommand({
      id: "outline",
      name: "Outline (Write an outline about the given topic)",
      editorCallback: async (editor, view) => {
        let activeView = this.app.workspace.getActiveViewOfType(import_obsidian2.MarkdownView);
        if (activeView) {
          new PromptModal(this.app, "Outline", "What do you want to make an outline for? \n For example, 'a detailed step-by-step process for getting into university'", this.obsidianAI.outline, (result) => {
            editor.replaceSelection(result || "");
          }).open();
        }
      }
    });
    this.addCommand({
      id: "creative-story",
      name: "Creative story (Write a creative story about the given topic)",
      editorCallback: async (editor, view) => {
        let activeView = this.app.workspace.getActiveViewOfType(import_obsidian2.MarkdownView);
        if (activeView) {
          new PromptModal(this.app, "Creative story", "What kind of story would you like to create? \n For example, 'A sci-fi adventure about a team of astronauts exploring a new planet'", this.obsidianAI.creativeStory, (result) => {
            editor.replaceSelection(result || "");
          }).open();
        }
      }
    });
    this.addCommand({
      id: "poem",
      name: "Poem (Write a poem about the given topic)",
      editorCallback: async (editor, view) => {
        let activeView = this.app.workspace.getActiveViewOfType(import_obsidian2.MarkdownView);
        if (activeView) {
          new PromptModal(this.app, "Poem", "What type of poem would you like to write? \n For example, a sonnet, haiku, free verse, or limerick. Consider what subject or theme you want to explore in your poem and what emotions or images you want to convey to your reader.", this.obsidianAI.poem, (result) => {
            editor.replaceSelection(result || "");
          }).open();
        }
      }
    });
    this.addCommand({
      id: "essay",
      name: "Essay (Write a Essay about the given topic)",
      editorCallback: async (editor, view) => {
        let activeView = this.app.workspace.getActiveViewOfType(import_obsidian2.MarkdownView);
        if (activeView) {
          new PromptModal(this.app, "Essay", "What would you like to write your essay about? \n For example, 'The impact of social media on mental health'", this.obsidianAI.essay, (result) => {
            editor.replaceSelection(result || "");
          }).open();
        }
      }
    });
    this.addCommand({
      id: "meeting-agenda",
      name: "Meeting agenda (Write a meeting agenda about the given topic)",
      editorCallback: async (editor, view) => {
        let activeView = this.app.workspace.getActiveViewOfType(import_obsidian2.MarkdownView);
        if (activeView) {
          new PromptModal(this.app, "Meeting agenda", "What would you like to include in the meeting agenda? \n For example, 'Project update, review of goals, and team building exercise'.", this.obsidianAI.meetingAgenda, (result) => {
            editor.replaceSelection(result || "");
          }).open();
        }
      }
    });
    this.addCommand({
      id: "press-release",
      name: "Press release (Write a press release about the given topic)",
      editorCallback: async (editor, view) => {
        let activeView = this.app.workspace.getActiveViewOfType(import_obsidian2.MarkdownView);
        if (activeView) {
          new PromptModal(this.app, "Press release", "What would you like to create a press release about? \n For example, 'new product launch'", this.obsidianAI.pressRelease, (result) => {
            editor.replaceSelection(result || "");
          }).open();
        }
      }
    });
    this.addCommand({
      id: "job-description",
      name: "Job description (Write a job description about the given topic)",
      editorCallback: async (editor, view) => {
        let activeView = this.app.workspace.getActiveViewOfType(import_obsidian2.MarkdownView);
        if (activeView) {
          new PromptModal(this.app, "Job description", "What type of job description do you want to create? \n For example, 'Marketing Manager for a tech startup'", this.obsidianAI.jobDescription, (result) => {
            editor.replaceSelection(result || "");
          }).open();
        }
      }
    });
    this.addCommand({
      id: "sales-email",
      name: "Sales email (Write a sales email about the given topic)",
      editorCallback: async (editor, view) => {
        let activeView = this.app.workspace.getActiveViewOfType(import_obsidian2.MarkdownView);
        if (activeView) {
          new PromptModal(this.app, "Sales email", "What would you like to write in your sales email? \n For example, 'An introduction to your product or service and how it can solve the recipient's problem'", this.obsidianAI.salesEmail, (result) => {
            editor.replaceSelection(result || "");
          }).open();
        }
      }
    });
    this.addCommand({
      id: "recruiting-email",
      name: "Recruiting email (Write a recruiting email about the given topic)",
      editorCallback: async (editor, view) => {
        let activeView = this.app.workspace.getActiveViewOfType(import_obsidian2.MarkdownView);
        if (activeView) {
          new PromptModal(this.app, "Recruiting email", "What position are you recruiting for? \n For example, 'Marketing Manager position at ABC Inc.'", this.obsidianAI.recruitingEmail, (result) => {
            editor.replaceSelection(result || "");
          }).open();
        }
      }
    });
    this.addCommand({
      id: "improve-writing",
      name: "Improve writing (Improve a given piece of writing - promptless)",
      editorCallback: async (editor, view) => {
        let activeView = this.app.workspace.getActiveViewOfType(import_obsidian2.MarkdownView);
        if (activeView) {
          let fileContents = view.editor.getSelection();
          let response = this.obsidianAI.improveWriting(await fileContents);
          console.log(editor.getSelection());
          editor.replaceSelection(await response || "");
        }
      }
    });
    this.addCommand({
      id: "fix-speaking-grammar",
      name: "Fix speaking and grammar (Fix spelling and grammar for a given piece of writing - promptless)",
      editorCallback: async (editor, view) => {
        let activeView = this.app.workspace.getActiveViewOfType(import_obsidian2.MarkdownView);
        if (activeView) {
          let fileContents = view.editor.getSelection();
          let response = this.obsidianAI.fixSpellingAndGrammar(await fileContents);
          console.log(editor.getSelection());
          editor.replaceSelection(await response || "");
        }
      }
    });
    this.addCommand({
      id: "explain-this",
      name: "Explain this text (Explain the given piece of text - promptless)",
      editorCallback: async (editor, view) => {
        let activeView = this.app.workspace.getActiveViewOfType(import_obsidian2.MarkdownView);
        if (activeView) {
          let fileContents = view.editor.getSelection();
          let response = this.obsidianAI.explainThis(await fileContents);
          console.log(editor.getSelection());
          editor.replaceSelection(await response || "");
        }
      }
    });
    this.addCommand({
      id: "make-longer",
      name: "Make longer (Make the given text longer - promptless)",
      editorCallback: async (editor, view) => {
        let activeView = this.app.workspace.getActiveViewOfType(import_obsidian2.MarkdownView);
        if (activeView) {
          let fileContents = view.editor.getSelection();
          let response = this.obsidianAI.makeLonger(await fileContents);
          console.log(editor.getSelection());
          editor.replaceSelection(await response || "");
        }
      }
    });
    this.addCommand({
      id: "make-shorter",
      name: "Make shorter (Make the given text shorter - promptless)",
      editorCallback: async (editor, view) => {
        let activeView = this.app.workspace.getActiveViewOfType(import_obsidian2.MarkdownView);
        if (activeView) {
          let fileContents = view.editor.getSelection();
          let response = this.obsidianAI.makeShorter(await fileContents);
          console.log(editor.getSelection());
          editor.replaceSelection(await response || "");
        }
      }
    });
    this.addCommand({
      id: "use-simpler-language",
      name: "Use simpler language (Rewrite the given text using simpler language - promptless)",
      editorCallback: async (editor, view) => {
        let activeView = this.app.workspace.getActiveViewOfType(import_obsidian2.MarkdownView);
        if (activeView) {
          let fileContents = view.editor.getSelection();
          let response = this.obsidianAI.useSimplerLanguage(await fileContents);
          console.log(editor.getSelection());
          editor.replaceSelection(await response || "");
        }
      }
    });
    this.addSettingTab(new ObsidianAISettingTab(this.app, this));
    this.registerInterval(window.setInterval(() => console.log("setInterval"), 5 * 60 * 1e3));
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
    this.obsidianAI = new ChatGPT(this.settings.apiKey);
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var ObsidianAISettingTab = class extends import_obsidian2.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Settings for Obsidian AI." });
    new import_obsidian2.Setting(containerEl).setName("OpenAI API Key").setDesc("Get it from https://platform.openai.com/account/api-keys").addText((text) => text.setPlaceholder("API Key").setValue(this.plugin.settings.apiKey).onChange(async (value) => {
      this.plugin.settings.apiKey = value;
      await this.plugin.saveSettings();
    }));
  }
};
